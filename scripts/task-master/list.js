#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
 * –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ tasks.json
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const os = require('os');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
const isGlobalMode = process.env.TASK_MASTER_MODE === 'global';
const tasksDir = process.env.TASK_MASTER_DIR || path.join(process.cwd(), 'tasks');
const tasksFile = process.env.TASK_MASTER_FILE || path.join(tasksDir, 'tasks.json');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    const initCommand = isGlobalMode ? 'task-master init' : 'npm run task-master:init';
    console.log(chalk.red(`‚úó –§–∞–π–ª tasks.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ${initCommand}`));
    console.log(chalk.blue(`–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${isGlobalMode ? '–≥–ª–æ–±–∞–ª—å–Ω—ã–π' : '–ª–æ–∫–∞–ª—å–Ω—ã–π'}`));
    console.log(chalk.blue(`–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${tasksFile}`));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
function getStatusEmoji(status) {
  switch (status) {
    case 'done':
      return chalk.green('‚úì');
    case 'in-progress':
      return chalk.blue('‚öô');
    case 'deferred':
      return chalk.yellow('‚è∏');
    case 'pending':
    default:
      return chalk.gray('‚óã');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function listTasks() {
  const tasksData = loadTasks();
  
  console.log(chalk.bold(`\nüìã –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${chalk.blue(tasksData.project)} (v${tasksData.version})\n`));
  
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    const generateCommand = isGlobalMode ? 'task-master generate' : 'npm run task-master:generate';
    console.log(chalk.yellow(`–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é ${generateCommand}`));
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const pending = tasksData.tasks.filter(task => task.status === 'pending');
  const inProgress = tasksData.tasks.filter(task => task.status === 'in-progress');
  const done = tasksData.tasks.filter(task => task.status === 'done');
  const deferred = tasksData.tasks.filter(task => task.status === 'deferred');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
  const printTask = (task) => {
    // Emoji –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    let priorityEmoji = '';
    switch(task.priority) {
      case 1: priorityEmoji = 'üî¥'; break; // –í—ã—Å–æ–∫–∏–π
      case 2: priorityEmoji = 'üü°'; break; // –°—Ä–µ–¥–Ω–∏–π
      case 3: priorityEmoji = 'üü¢'; break; // –ù–∏–∑–∫–∏–π
      default: priorityEmoji = '‚ö™'; break;
    }
    
    console.log(`${getStatusEmoji(task.status)} [${task.id}] ${task.title} ${priorityEmoji} ${chalk.dim(`(–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority})`)}`);
    
    if (task.subtasks && task.subtasks.length > 0) {
      task.subtasks.forEach(subtask => {
        console.log(`  ${getStatusEmoji(subtask.status)} ${subtask.id} ${subtask.title}`);
      });
    }
  };
  
  // –í—ã–≤–æ–¥ –∑–∞–¥–∞—á –ø–æ –≥—Ä—É–ø–ø–∞–º
  if (inProgress.length > 0) {
    console.log(chalk.blue('\n‚öô –í –ü–†–û–¶–ï–°–°–ï:'));
    inProgress.forEach(printTask);
  }
  
  if (pending.length > 0) {
    console.log(chalk.gray('\n‚óã –û–ñ–ò–î–ê–Æ–¢:'));
    pending.forEach(printTask);
  }
  
  if (done.length > 0) {
    console.log(chalk.green('\n‚úì –í–´–ü–û–õ–ù–ï–ù–´:'));
    done.forEach(printTask);
  }
  
  if (deferred.length > 0) {
    console.log(chalk.yellow('\n‚è∏ –û–¢–õ–û–ñ–ï–ù–´:'));
    deferred.forEach(printTask);
  }
  
  console.log('\n');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
  const chatCommand = isGlobalMode ? 'task-master chat' : 'npm run task-master:chat';
  console.log(chalk.dim(`–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ${chatCommand} "—Å–ø—Ä–∞–≤–∫–∞"`));
  console.log('\n');
}

// –ó–∞–ø—É—Å–∫
listTasks();