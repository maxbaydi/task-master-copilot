#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const readline = require('readline');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–¥–∞—á
const tasksFile = path.join(process.cwd(), 'tasks', 'tasks.json');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è —Å –∫–æ–Ω—Å–æ–ª–∏
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    console.log(chalk.red('‚úó –§–∞–π–ª tasks.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run task-master:init'));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks(tasksData) {
  try {
    fs.writeFileSync(tasksFile, JSON.stringify(tasksData, null, 2));
    return true;
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ ID –∑–∞–¥–∞—á–∏
function getNextTaskId(tasks) {
  if (tasks.length === 0) return 1;
  return Math.max(...tasks.map(task => task.id)) + 1;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
function generateTaskFromDescription(description, tasksData) {
  console.log(chalk.blue('\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ...\n'));
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = description.split('\n').filter(line => line.trim() !== '');
  
  // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
  const title = lines[0].trim();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ *)
  const subtasksLines = lines.slice(1).filter(line => line.trim().match(/^[\-\*]\s+/));
  const subtasks = subtasksLines.map((line, index) => {
    return {
      id: `${getNextTaskId(tasksData.tasks)}.${index + 1}`,
      title: line.trim().replace(/^[\-\*]\s+/, ''),
      status: 'pending'
    };
  });
  
  // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç—Ä–æ–∫
  const descLines = lines.slice(1).filter(line => !line.trim().match(/^[\-\*]\s+/));
  const taskDescription = descLines.join('\n').trim() || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  const newTask = {
    id: getNextTaskId(tasksData.tasks),
    title,
    description: taskDescription,
    status: 'pending',
    priority: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    subtasks,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  return newTask;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
function generateMultipleTasks() {
  const tasksData = loadTasks();
  
  console.log(chalk.bold('\nüìù –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á\n'));
  console.log(chalk.blue('–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å—Ç—Ä–æ–∫–æ–π "###".'));
  console.log(chalk.blue('–î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.'));
  console.log(chalk.blue('–°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ *, –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏.'));
  console.log(chalk.blue('–í–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞.\n'));
  
  let batchInput = '';
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  function readLines() {
    rl.question('> ', (input) => {
      if (input.trim() === '') {
        if (batchInput.trim() === '') {
          console.log(chalk.yellow('–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'));
          readLines();
          return;
        }
        
        processBatchTasks(batchInput, tasksData);
      } else {
        batchInput += input + '\n';
        readLines();
      }
    });
  }
  
  readLines();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á
function processBatchTasks(batchInput, tasksData) {
  // –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "###"
  const taskDescriptions = batchInput.split(/###/).map(desc => desc.trim()).filter(desc => desc);
  
  if (taskDescriptions.length === 0) {
    console.log(chalk.yellow('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ä–∞–∑–¥–µ–ª—è–µ—Ç–µ –∑–∞–¥–∞—á–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ "###"'));
    rl.close();
    return;
  }
  
  const createdTasks = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const taskDesc of taskDescriptions) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = taskDesc.split('\n').filter(line => line.trim() !== '');
    
    if (lines.length === 0) continue;
    
    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const title = lines[0].trim();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ *)
    const subtasksLines = lines.slice(1).filter(line => line.trim().match(/^[\-\*]\s+/));
    
    const taskId = getNextTaskId(tasksData.tasks);
    
    const subtasks = subtasksLines.map((line, index) => {
      return {
        id: `${taskId}.${index + 1}`,
        title: line.trim().replace(/^[\-\*]\s+/, ''),
        status: 'pending'
      };
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç—Ä–æ–∫
    const descLines = lines.slice(1).filter(line => !line.trim().match(/^[\-\*]\s+/));
    const taskDescription = descLines.join('\n').trim() || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    const newTask = {
      id: taskId,
      title,
      description: taskDescription,
      status: 'pending',
      priority: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      subtasks,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
    tasksData.tasks.push(newTask);
    createdTasks.push(newTask);
  }
  
  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
  if (createdTasks.length === 0) {
    console.log(chalk.yellow('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.'));
    rl.close();
    return;
  }
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
  rl.question(chalk.blue('\n–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (1 - –≤—ã—Å–æ–∫–∏–π, 2 - —Å—Ä–µ–¥–Ω–∏–π, 3 - –Ω–∏–∑–∫–∏–π) [2]: '), (priority) => {
    const priorityValue = parseInt(priority) || 2;
    const normalizedPriority = Math.min(Math.max(priorityValue, 1), 3); // –û—Ç 1 –¥–æ 3
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    for (const task of createdTasks) {
      task.priority = normalizedPriority;
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const taskIndex = tasksData.tasks.findIndex(t => t.id === task.id);
      if (taskIndex !== -1) {
        tasksData.tasks[taskIndex].priority = normalizedPriority;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
    if (saveTasks(tasksData)) {
      console.log(chalk.green(`\n‚úì –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${createdTasks.length}`));
      
      createdTasks.forEach(task => {
        console.log(chalk.bold(`\n[${task.id}] ${task.title}`));
        console.log(chalk.dim(`  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}`));
        if (task.subtasks.length > 0) {
          console.log(chalk.dim(`  –ü–æ–¥–∑–∞–¥–∞—á: ${task.subtasks.length}`));
          task.subtasks.forEach(subtask => {
            console.log(chalk.dim(`    - ${subtask.title}`));
          });
        }
      });
      
      console.log(chalk.green('\n‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'));
      console.log(chalk.blue('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run task-master:list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á.'));
      rl.close();
    } else {
      rl.close();
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
function generateTasks() {
  const tasksData = loadTasks();
  
  console.log(chalk.bold('\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n'));
  
  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  rl.question(chalk.blue('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n1 - –°–æ–∑–¥–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É\n2 - –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á\n–í—ã–±–æ—Ä (1/2): '), (choice) => {
    if (choice === '2') {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
      generateMultipleTasks();
      return;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
    console.log(chalk.blue('\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.'));
    console.log(chalk.blue('–°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ *, –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏.'));
    console.log(chalk.blue('–í–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞.\n'));
    
    let description = '';
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    function readLines() {
      rl.question('> ', (input) => {
        if (input.trim() === '') {
          if (description.trim() === '') {
            console.log(chalk.yellow('–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'));
            readLines();
            return;
          }
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
          const newTask = generateTaskFromDescription(description, tasksData);
          
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          rl.question(chalk.blue('\n–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 - –≤—ã—Å–æ–∫–∏–π, 2 - —Å—Ä–µ–¥–Ω–∏–π, 3 - –Ω–∏–∑–∫–∏–π) [2]: '), (priority) => {
            const priorityValue = parseInt(priority) || 2;
            newTask.priority = Math.min(Math.max(priorityValue, 1), 3); // –û—Ç 1 –¥–æ 3
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
            tasksData.tasks.push(newTask);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
            if (saveTasks(tasksData)) {
              console.log(chalk.green(`\n‚úì –ó–∞–¥–∞—á–∞ #${newTask.id} "${newTask.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`));
              console.log(chalk.dim(`  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${newTask.priority}`));
              console.log(chalk.dim(`  –ü–æ–¥–∑–∞–¥–∞—á: ${newTask.subtasks.length}`));
              
              // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á—É
              rl.question(chalk.blue('\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞–¥–∞—á—É? (y/n) [y]: '), (answer) => {
                if (answer.toLowerCase() !== 'n') {
                  description = '';
                  console.log('\n');
                  readLines();
                } else {
                  console.log(chalk.green('\n‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'));
                  console.log(chalk.blue('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run task-master:list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á.'));
                  rl.close();
                }
              });
            } else {
              rl.close();
            }
          });
        } else {
          description += input + '\n';
          readLines();
        }
      });
    }
    
    readLines();
  });
}

// –ó–∞–ø—É—Å–∫
generateTasks();