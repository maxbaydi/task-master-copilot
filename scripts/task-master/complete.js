#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ 
 * –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const readline = require('readline');
const contextTracker = require('./context-tracker');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
const isGlobalMode = process.env.TASK_MASTER_MODE === 'global';
const tasksDir = process.env.TASK_MASTER_DIR || path.join(process.cwd(), 'tasks');
const tasksFile = process.env.TASK_MASTER_FILE || path.join(tasksDir, 'tasks.json');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    console.log(chalk.red(`‚úó –§–∞–π–ª ${path.basename(tasksFile)} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é task-master init –∏–ª–∏ npm run task-master:init`));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks(tasksData) {
  try {
    fs.writeFileSync(tasksFile, JSON.stringify(tasksData, null, 2));
    return true;
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    return false;
  }
}

/**
 * –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏
 * @param {string} summary - –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
 */
function completeTaskWithContextUpdate(taskId, summary) {
  const tasksData = loadTasks();
  let success = false;
  let message = '';
  let isMainTask = !taskId.includes('.');
  let mainTaskId = isMainTask ? parseInt(taskId) : parseInt(taskId.split('.')[0]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –ø–æ–¥–∑–∞–¥–∞—á–µ–π
  if (!isMainTask) {
    const [parentId, subtaskId] = taskId.split('.');
    const parentIdNum = parseInt(parentId);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
    const parentTask = tasksData.tasks.find(task => task.id === parentIdNum);
    
    if (!parentTask) {
      return {
        success: false,
        message: `‚úó –ó–∞–¥–∞—á–∞ —Å ID ${parentIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        nextTask: null
      };
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∑–∞–¥–∞—á—É
    const subtask = parentTask.subtasks.find(st => st.id === taskId);
    
    if (!subtask) {
      return {
        success: false,
        message: `‚úó –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        nextTask: null
      };
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    subtask.status = 'done';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const allSubtasksDone = parentTask.subtasks.every(st => st.status === 'done');
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ—Ç–º–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    if (allSubtasksDone) {
      parentTask.status = 'done';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
    parentTask.updated_at = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    success = saveTasks(tasksData);
    
    if (success) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const autoSummary = summary || `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞ ${taskId} "${subtask.title}"`;
      contextTracker.addHistoryEntry(parentIdNum, 'update', autoSummary);

      if (allSubtasksDone) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        contextTracker.updateTaskStatus(parentIdNum, 'done', `–í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ (${parentTask.subtasks.length})`);
      }
      
      message = `‚úì –ü–æ–¥–∑–∞–¥–∞—á–∞ #${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`;
      if (allSubtasksDone) {
        message += `\n‚úì –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–¥–∞—á–∞ #${parentIdNum} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`;
      }
    } else {
      message = '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    }
  } else {
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    const taskIdNum = parseInt(taskId);
    const task = tasksData.tasks.find(t => t.id === taskIdNum);
    
    if (!task) {
      return {
        success: false,
        message: `‚úó –ó–∞–¥–∞—á–∞ —Å ID ${taskIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        nextTask: null
      };
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    task.status = 'done';
    task.updated_at = new Date().toISOString();
    
    if (task.subtasks && task.subtasks.length > 0) {
      task.subtasks.forEach(st => {
        st.status = 'done';
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    success = saveTasks(tasksData);
    
    if (success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
      const autoSummary = summary || `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ "${task.title}"${task.subtasks.length > 0 ? ` –∏ –≤—Å–µ –µ—ë –ø–æ–¥–∑–∞–¥–∞—á–∏ (${task.subtasks.length})` : ''}`;
      contextTracker.updateTaskStatus(taskIdNum, 'done', autoSummary);

      message = `‚úì –ó–∞–¥–∞—á–∞ #${taskIdNum} "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`;
    } else {
      message = '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    }
  }
  
  let contextUpdateResult = null;
  let nextTask = null;
  
  if (success) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    contextUpdateResult = contextTracker.updateContextAfterTaskCompletion(
      mainTaskId, 
      summary || `–ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`
    );
    
    nextTask = contextUpdateResult.nextTask;
  }
  
  return {
    success,
    message,
    nextTask,
    copilotContext: contextUpdateResult ? contextUpdateResult.copilotContext : null
  };
}

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
 */
async function completeTaskInteractive(taskId) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  console.log(chalk.blue('–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:'));
  
  rl.question('> ', (summary) => {
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    const result = completeTaskWithContextUpdate(taskId, summary);
    
    console.log(chalk.green(result.message));
    
    // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞
    if (result.success && result.nextTask) {
      console.log('');
      console.log(chalk.cyan('üöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:'));
      console.log(chalk.cyan(`#${result.nextTask.id}: ${result.nextTask.title}`));
      console.log(chalk.cyan(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${result.nextTask.priority}`));
      if (result.nextTask.description) {
        console.log(chalk.cyan(`–û–ø–∏—Å–∞–Ω–∏–µ: ${result.nextTask.description}`));
      }
      
      console.log('');
      console.log(chalk.yellow('üìù –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏? (y/n)'));
      
      rl.question('> ', (answer) => {
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === '–¥–∞') {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
          result.nextTask.status = 'in-progress';
          result.nextTask.updated_at = new Date().toISOString();
          
          const tasksData = loadTasks();
          const nextTaskIndex = tasksData.tasks.findIndex(t => t.id === result.nextTask.id);
          
          if (nextTaskIndex !== -1) {
            tasksData.tasks[nextTaskIndex] = result.nextTask;
            saveTasks(tasksData);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
          contextTracker.updateTaskStatus(
            result.nextTask.id, 
            'in-progress', 
            `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${result.nextTask.title}"`
          );
          
          console.log(chalk.green(`‚úì –ó–∞–¥–∞—á–∞ #${result.nextTask.id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"`));
          console.log(chalk.green('üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è GitHub Copilot'));
        } else {
          console.log(chalk.yellow('–ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.'));
        }
        
        rl.close();
      });
    } else {
      rl.close();
    }
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
 */
function showNextTask() {
  const nextTask = contextTracker.getNextTask();
  
  if (!nextTask) {
    console.log(chalk.yellow('–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ pending. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.'));
    return;
  }
  
  console.log(chalk.cyan('üöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:'));
  console.log(chalk.cyan(`#${nextTask.id}: ${nextTask.title}`));
  console.log(chalk.cyan(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority}`));
  
  if (nextTask.description) {
    console.log(chalk.cyan(`–û–ø–∏—Å–∞–Ω–∏–µ: ${nextTask.description}`));
  }
  
  if (nextTask.subtasks && nextTask.subtasks.length > 0) {
    console.log(chalk.cyan('\n–ü–æ–¥–∑–∞–¥–∞—á–∏:'));
    nextTask.subtasks.forEach(subtask => {
      const statusEmoji = subtask.status === 'done' ? '‚úì' : '‚óã';
      console.log(chalk.cyan(`${statusEmoji} ${subtask.id} ${subtask.title}`));
    });
  }
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot
  const copilotContext = contextTracker.prepareTaskContextForCopilot(nextTask.id);
  console.log(chalk.green('\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –≥–æ—Ç–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
  console.log(chalk.blue(`task-master complete:start ${nextTask.id}`));
}

/**
 * –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
 */
function startTaskExecution(taskId) {
  const tasksData = loadTasks();
  const task = taskId ? tasksData.tasks.find(t => t.id === parseInt(taskId)) : contextTracker.getNextTask();
  
  if (!task) {
    console.log(chalk.red(`‚úó –ó–∞–¥–∞—á–∞${taskId ? ` —Å ID ${taskId}` : ''} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`));
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
  task.status = 'in-progress';
  task.updated_at = new Date().toISOString();
  
  const taskIndex = tasksData.tasks.findIndex(t => t.id === task.id);
  
  if (taskIndex !== -1) {
    tasksData.tasks[taskIndex] = task;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (saveTasks(tasksData)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
      contextTracker.updateTaskStatus(
        task.id, 
        'in-progress', 
        `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${task.title}"`
      );
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
      const copilotContext = contextTracker.prepareTaskContextForCopilot(task.id);
      
      console.log(chalk.green(`‚úì –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"`));
      console.log(chalk.green('üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è GitHub Copilot'));
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (task.subtasks && task.subtasks.length > 0) {
        console.log(chalk.cyan('\n–ü–æ–¥–∑–∞–¥–∞—á–∏:'));
        task.subtasks.forEach(subtask => {
          const statusEmoji = subtask.status === 'done' ? '‚úì' : '‚óã';
          console.log(chalk.cyan(`${statusEmoji} ${subtask.id} ${subtask.title}`));
        });
      }
    } else {
      console.log(chalk.red('‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'));
    }
  } else {
    console.log(chalk.red(`‚úó –ó–∞–¥–∞—á–∞ —Å ID ${task.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á`));
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0] || '';
  
  if (command === 'next') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    showNextTask();
  } else if (command === 'start') {
    // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const taskId = args[1];
    startTaskExecution(taskId);
  } else {
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
    const taskId = args[0];
    
    if (!taskId) {
      console.log(chalk.yellow('–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:'));
      console.log(chalk.blue('npm run task-master:complete 1'));
      console.log(chalk.blue('npm run task-master:complete 1.2'));
      console.log(chalk.blue('\n–ò–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:'));
      console.log(chalk.blue('npm run task-master:complete:interactive 1'));
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    const isInteractive = process.env.TASK_MASTER_INTERACTIVE === 'true' || args[1] === '--interactive' || args[1] === '-i';
    
    if (isInteractive) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      completeTaskInteractive(taskId);
    } else {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      const result = completeTaskWithContextUpdate(taskId);
      console.log(chalk.green(result.message));
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—ë
      if (result.success && result.nextTask) {
        console.log('');
        console.log(chalk.cyan('üöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:'));
        console.log(chalk.cyan(`#${result.nextTask.id}: ${result.nextTask.title}`));
        console.log(chalk.cyan(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${result.nextTask.priority}`));
        
        console.log(chalk.green('\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –≥–æ—Ç–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
        console.log(chalk.blue(`task-master complete:start ${result.nextTask.id}`));
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  completeTaskWithContextUpdate,
  startTaskExecution,
  showNextTask
};