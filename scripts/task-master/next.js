#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 
 * –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const contextTracker = require('./context-tracker');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
const isGlobalMode = process.env.TASK_MASTER_MODE === 'global';
const tasksDir = process.env.TASK_MASTER_DIR || path.join(process.cwd(), 'tasks');
const tasksFile = process.env.TASK_MASTER_FILE || path.join(tasksDir, 'tasks.json');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    console.log(chalk.red(`‚úó –§–∞–π–ª ${path.basename(tasksFile)} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é task-master init –∏–ª–∏ npm run task-master:init`));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks(tasksData) {
  try {
    fs.writeFileSync(tasksFile, JSON.stringify(tasksData, null, 2));
    return true;
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
 * @returns {object|null} - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ null
 */
function getNextTask() {
  const tasksData = loadTasks();
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (high, medium, low)
  const priorityOrder = { 'high': 1, 'medium': 2, 'low': 3 };
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (—Å—Ç–∞—Ç—É—Å pending)
  const pendingTasks = tasksData.tasks.filter(task => task.status === 'pending');
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  pendingTasks.sort((a, b) => {
    return priorityOrder[a.priority] - priorityOrder[b.priority];
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
  return pendingTasks.length > 0 ? pendingTasks[0] : null;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {object|null} - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ null
 */
function getCurrentTask() {
  const tasksData = loadTasks();
  
  // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in-progress
  const activeTasks = tasksData.tasks.filter(task => task.status === 'in-progress');
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
  return activeTasks.length > 0 ? activeTasks[0] : null;
}

/**
 * –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 * @param {boolean} auto - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
 * @param {string} targetTaskId - ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å (–µ—Å–ª–∏ auto=false)
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function startNextTask(auto = true, targetTaskId = null) {
  const tasksData = loadTasks();
  
  let task = null;
  
  if (auto) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    task = getNextTask();
  } else if (targetTaskId) {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –ø–æ ID
    const taskId = parseInt(targetTaskId);
    task = tasksData.tasks.find(t => t.id === taskId && t.status === 'pending');
  }
  
  if (!task) {
    return {
      success: false,
      message: auto 
        ? '–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ pending. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.' 
        : `–ó–∞–¥–∞—á–∞ —Å ID ${targetTaskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ pending.`
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const currentTask = getCurrentTask();
  
  if (currentTask) {
    return {
      success: false,
      message: `–£–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: #${currentTask.id} "${currentTask.title}". –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.`,
      currentTask
    };
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
  task.status = 'in-progress';
  task.updated_at = new Date().toISOString();
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –≤ –º–∞—Å—Å–∏–≤–µ
  const taskIndex = tasksData.tasks.findIndex(t => t.id === task.id);
  
  if (taskIndex !== -1) {
    tasksData.tasks[taskIndex] = task;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (saveTasks(tasksData)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
      contextTracker.updateTaskStatus(
        task.id, 
        'in-progress', 
        `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${task.title}"`
      );
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
      const copilotContext = contextTracker.prepareTaskContextForCopilot(task.id);
      
      return {
        success: true,
        message: `‚úì –ó–∞–¥–∞—á–∞ #${task.id} "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"`,
        task,
        copilotContext
      };
    } else {
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
      };
    }
  } else {
    return {
      success: false,
      message: `–ó–∞–¥–∞—á–∞ —Å ID ${task.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á`
    };
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
 * @returns {object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ –∏–ª–∏ null
 */
function showNextTaskInfo() {
  const nextTask = getNextTask();
  
  if (!nextTask) {
    console.log(chalk.yellow('–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ pending. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.'));
    return null;
  }
  
  console.log(chalk.cyan('üöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:'));
  console.log(chalk.cyan(`#${nextTask.id}: ${nextTask.title}`));
  console.log(chalk.cyan(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority}`));
  
  if (nextTask.description) {
    console.log(chalk.cyan(`–û–ø–∏—Å–∞–Ω–∏–µ: ${nextTask.description}`));
  }
  
  if (nextTask.subtasks && nextTask.subtasks.length > 0) {
    console.log(chalk.cyan('\n–ü–æ–¥–∑–∞–¥–∞—á–∏:'));
    nextTask.subtasks.forEach(subtask => {
      const statusEmoji = subtask.status === 'done' ? '‚úì' : '‚óã';
      console.log(chalk.cyan(`${statusEmoji} ${subtask.id} ${subtask.title}`));
    });
  }
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot
  const copilotContext = contextTracker.prepareTaskContextForCopilot(nextTask.id);
  console.log(chalk.green('\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –≥–æ—Ç–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
  console.log(chalk.blue(`task-master next:start`));
  
  return {
    task: nextTask,
    copilotContext
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–∞–º
 */
function checkTaskProgress() {
  const tasksData = loadTasks();
  
  const totalTasks = tasksData.tasks.length;
  const doneTasks = tasksData.tasks.filter(task => task.status === 'done').length;
  const inProgressTasks = tasksData.tasks.filter(task => task.status === 'in-progress').length;
  const pendingTasks = tasksData.tasks.filter(task => task.status === 'pending').length;
  
  const progressPercentage = (doneTasks / totalTasks) * 100;
  
  console.log(chalk.cyan('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á:'));
  console.log(chalk.cyan(`–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`));
  console.log(chalk.green(`‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${doneTasks} (${progressPercentage.toFixed(1)}%)`));
  console.log(chalk.yellow(`üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${inProgressTasks}`));
  console.log(chalk.blue(`‚è≥ –û–∂–∏–¥–∞—é—Ç: ${pendingTasks}`));
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
  const currentTask = getCurrentTask();
  
  if (currentTask) {
    console.log(chalk.yellow('\nüîÑ –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:'));
    console.log(chalk.yellow(`#${currentTask.id}: ${currentTask.title}`));
    
    if (currentTask.subtasks && currentTask.subtasks.length > 0) {
      const doneSubtasks = currentTask.subtasks.filter(st => st.status === 'done').length;
      const subtaskProgress = (doneSubtasks / currentTask.subtasks.length) * 100;
      
      console.log(chalk.yellow(`–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–∑–∞–¥–∞—á: ${doneSubtasks}/${currentTask.subtasks.length} (${subtaskProgress.toFixed(1)}%)`));
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    contextTracker.prepareTaskContextForCopilot(currentTask.id);
  }
  
  return {
    totalTasks,
    doneTasks,
    inProgressTasks,
    pendingTasks,
    progressPercentage,
    currentTask
  };
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0] || '';
  
  if (command === 'start') {
    // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
    const taskId = args[1];
    const auto = !taskId;
    
    const result = startNextTask(auto, taskId);
    
    if (result.success) {
      console.log(chalk.green(result.message));
      
      // –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
      if (result.task.subtasks && result.task.subtasks.length > 0) {
        console.log(chalk.cyan('\n–ü–æ–¥–∑–∞–¥–∞—á–∏:'));
        result.task.subtasks.forEach(subtask => {
          const statusEmoji = subtask.status === 'done' ? '‚úì' : '‚óã';
          console.log(chalk.cyan(`${statusEmoji} ${subtask.id} ${subtask.title}`));
        });
      }
      
      console.log(chalk.green('\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è GitHub Copilot'));
      console.log(chalk.cyan('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å Copilot –ø–æ–º–æ—á—å —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.'));
    } else {
      console.log(chalk.red(result.message));
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å
      if (result.currentTask) {
        console.log(chalk.yellow('\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
        console.log(chalk.blue(`task-master complete ${result.currentTask.id}`));
      }
    }
  } else if (command === 'progress') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–∞–º
    checkTaskProgress();
  } else {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    showNextTaskInfo();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  getNextTask,
  getCurrentTask,
  startNextTask,
  checkTaskProgress,
  showNextTaskInfo
};