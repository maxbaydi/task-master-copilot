#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 * –í—ã–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–¥–∞—á
const tasksFile = path.join(process.cwd(), 'tasks', 'tasks.json');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    console.log(chalk.red('‚úó –§–∞–π–ª tasks.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run task-master:init'));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks(tasksData) {
  try {
    fs.writeFileSync(tasksFile, JSON.stringify(tasksData, null, 2));
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
function getNextTask() {
  const tasksData = loadTasks();
  
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    console.log(chalk.yellow('–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é npm run task-master:generate'));
    return;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å–µ pending —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  const pendingTasks = tasksData.tasks.filter(task => task.status === 'pending');
  
  if (pendingTasks.length === 0) {
    console.log(chalk.yellow('–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ pending. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.'));
    return;
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç 1 –¥–æ 3)
  pendingTasks.sort((a, b) => a.priority - b.priority);
  
  const nextTask = pendingTasks[0];
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ in-progress
  const taskIndex = tasksData.tasks.findIndex(task => task.id === nextTask.id);
  if (taskIndex !== -1) {
    tasksData.tasks[taskIndex].status = 'in-progress';
    tasksData.tasks[taskIndex].updated_at = new Date().toISOString();
    saveTasks(tasksData);
  }
  
  // –í—ã–≤–æ–¥ –∑–∞–¥–∞—á–∏
  console.log(chalk.bold(`\nüöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\n`));
  console.log(chalk.blue(`[${nextTask.id}] ${nextTask.title}`));
  console.log(chalk.dim(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority}`));
  console.log(`\n${nextTask.description}\n`);
  
  // –í—ã–≤–æ–¥ –ø–æ–¥–∑–∞–¥–∞—á
  if (nextTask.subtasks && nextTask.subtasks.length > 0) {
    console.log(chalk.bold('–ü–æ–¥–∑–∞–¥–∞—á–∏:'));
    nextTask.subtasks.forEach(subtask => {
      const statusEmoji = subtask.status === 'done' ? chalk.green('‚úì') : chalk.gray('‚óã');
      console.log(`${statusEmoji} ${subtask.id} ${subtask.title}`);
    });
  }
  
  console.log(chalk.green('\n‚úì –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"\n'));
  console.log(chalk.dim('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run task-master:complete <id> –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏'));
}

// –ó–∞–ø—É—Å–∫
getNextTask();