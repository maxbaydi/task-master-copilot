#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Task Master —á–µ—Ä–µ–∑ —á–∞—Ç
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const contextTracker = require('./context-tracker');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
const isGlobalMode = process.env.TASK_MASTER_MODE === 'global';
const tasksDir = process.env.TASK_MASTER_DIR || path.join(process.cwd(), 'tasks');
const tasksFile = process.env.TASK_MASTER_FILE || path.join(tasksDir, 'tasks.json');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    console.log(chalk.red(`‚úó –§–∞–π–ª ${path.basename(tasksFile)} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é task-master init –∏–ª–∏ npm run task-master:init`));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks(tasksData) {
  try {
    fs.writeFileSync(tasksFile, JSON.stringify(tasksData, null, 2));
    return true;
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ ID –∑–∞–¥–∞—á–∏
function getNextTaskId(tasks) {
  if (tasks.length === 0) return 1;
  return Math.max(...tasks.map(task => task.id)) + 1;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –∏–∑ —á–∞—Ç–∞
 */
function processCommand(command) {
  // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const lowerCommand = command.toLowerCase();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
  if (
    lowerCommand.startsWith('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å') ||
    lowerCommand.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é') ||
    lowerCommand.startsWith('continue') ||
    lowerCommand.includes('continue to iterate')
  ) {
    return continueCopilotIteration(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  if (lowerCommand.startsWith('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É')) {
    return createTaskFromChat(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  if (lowerCommand.includes('–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á') || lowerCommand.includes('–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏')) {
    return listTasks();
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  const completeRegex = /–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É (\d+(?:\.\d+)?) –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω(—É—é|—É—é)/i;
  const completeMatch = command.match(completeRegex);
  if (completeMatch) {
    return completeTask(completeMatch[1]);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
  if (lowerCommand.includes('–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É') || lowerCommand.includes('–∫–∞–∫–∞—è —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')) {
    return getNextTask();
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  if (lowerCommand.startsWith('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É')) {
    return generateTaskFromDescription(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
  if (lowerCommand.startsWith('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏') || lowerCommand.startsWith('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏')) {
    return generateMultipleTasks(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞
  if (lowerCommand.includes('—Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞') || 
      lowerCommand.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞') ||
      lowerCommand.includes('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
    return generateTasksFromPlan(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (lowerCommand.startsWith('–æ–±–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç')) {
    const taskIdRegex = /–æ–±–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (\d+)/i;
    const taskMatch = command.match(taskIdRegex);
    
    if (taskMatch) {
      return updateTaskContext(parseInt(taskMatch[1]));
    } else {
      return updateCurrentContext();
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  if (lowerCommand.includes('–ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞—á—É') || 
      lowerCommand.includes('—á—Ç–æ –¥–∞–ª—å—à–µ') || 
      lowerCommand.includes('–∫–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–π')) {
    return suggestNextTask();
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const checkCompletionRegex = /–∑–∞–¥–∞—á–∞ (\d+(?:\.\d+)?) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\?/i;
  const checkCompletionMatch = command.match(checkCompletionRegex);
  if (checkCompletionMatch) {
    return checkTaskCompletion(checkCompletionMatch[1]);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot
  if (lowerCommand.includes('–ø–æ–ª—É—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è copilot') || 
      lowerCommand.includes('–ø–æ–¥–≥–æ—Ç–æ–≤—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è copilot') ||
      lowerCommand.includes('–æ–±–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è copilot')) {
    
    const taskIdRegex = /–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è copilot .*?–∑–∞–¥–∞—á[–∏–∞]? (\d+)/i;
    const taskMatch = command.match(taskIdRegex);
    
    if (taskMatch) {
      return prepareCopilotContext(parseInt(taskMatch[1]));
    } else {
      return prepareCopilotContext();
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É
  return {
    success: false,
    message: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n' +
      '- —Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n' +
      '- –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n' +
      '- –æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É [id] –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n' +
      '- –¥–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É\n' +
      '- –æ–±–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ [id]\n' +
      '- –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞—á—É\n' +
      '- –ø–æ–ª—É—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è copilot [–¥–ª—è –∑–∞–¥–∞—á–∏ id]'
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é" - –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π
 * @param {string} command - –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —á–∞—Ç–∞
 * @returns {string} - –û—Ç–≤–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
 */
function continueCopilotIteration(command) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
  const currentTask = require('./next').getCurrentTask();
  
  if (!currentTask) {
    return '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.';
  }
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
  const completeResult = require('./complete').completeTaskWithContextUpdate(
    currentTask.id.toString(), 
    `–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞: "${command}")`
  );
  
  if (!completeResult.success) {
    return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É: ${completeResult.message}`;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
  if (!completeResult.nextTask) {
    return `‚úÖ –ó–∞–¥–∞—á–∞ #${currentTask.id} "${currentTask.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏.`;
  }
  
  // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
  require('./complete').startTaskExecution(completeResult.nextTask.id.toString());
  
  return `‚úÖ –ó–∞–¥–∞—á–∞ #${currentTask.id} "${currentTask.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n` +
         `üöÄ –ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏: #${completeResult.nextTask.id} "${completeResult.nextTask.title}"\n` +
         `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${completeResult.nextTask.priority}\n` +
         `${completeResult.nextTask.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${completeResult.nextTask.description}\n` : ''}` +
         `\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –≥–æ—Ç–æ–≤. –ú–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.`;
}

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é —Å GitHub Copilot (–∫–æ–º–∞–Ω–¥–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
 * @param {string} command - –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –∏–ª–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é?')
 * @returns {Promise<object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç Copilot. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å success, message –∏ data (–æ—Ç–≤–µ—Ç Copilot).
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 *   processCommand('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é?')
 */
async function continueCopilotIteration(command) {
  try {
    const copilot = require('./copilot');
    const next = require('./next');
    const complete = require('./complete');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
    const currentTask = next.getCurrentTask();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—ë
    if (currentTask) {
      console.log(chalk.yellow(`–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É #${currentTask.id}: "${currentTask.title}"`));
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
      const completeResult = await complete.completeTask(currentTask.id.toString());
      
      if (!completeResult.success) {
        return {
          success: false,
          message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É: ${completeResult.message}`
        };
      }
      
      console.log(chalk.green(`‚úì –ó–∞–¥–∞—á–∞ #${currentTask.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`));
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
    const nextTaskResult = next.startNextTask(true); // true –æ–∑–Ω–∞—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
    
    if (!nextTaskResult.success) {
      return {
        success: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: ${nextTaskResult.message}`
      };
    }
    
    console.log(chalk.green(`‚úì –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ #${nextTaskResult.task.id}: "${nextTaskResult.task.title}"`));
    
    // –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const prompt = command.replace(/(–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å( –∏—Ç–µ—Ä–∞—Ü–∏—é)?|continue( to iterate)?)/i, '').trim();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç Copilot –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const result = await copilot.getCopilotContinuation(prompt);
    
    return {
      success: true,
      message: `–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ #${nextTaskResult.task.id} "${nextTaskResult.task.title}" –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç GitHub Copilot:`,
      data: result,
      taskTransition: {
        previousTask: currentTask,
        nextTask: nextTaskResult.task
      }
    };
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ: ${error.message}`
    };
  }
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function prepareCopilotContext(taskId) {
  try {
    const context = require('./context');
    const copilotContext = context.prepareCopilotContext(taskId);
    
    if (copilotContext) {
      return {
        success: true,
        message: taskId 
          ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}` 
          : '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        data: { copilotContext }
      };
    } else {
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot'
      };
    }
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GitHub Copilot: ${error.message}`
    };
  }
}

/**
 * –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * 
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function suggestNextTask() {
  try {
    const context = require('./context');
    const suggestion = context.suggestTaskAndPrepareContext();
    
    if (suggestion) {
      return {
        success: true,
        message: suggestion.message,
        data: suggestion
      };
    } else {
      return {
        success: false,
        message: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      };
    }
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}`
    };
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
 * 
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function updateCurrentContext() {
  const currentContext = contextTracker.getCurrentContext();
  if (!currentContext || !currentContext.activeTask) {
    return {
      success: false,
      message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'
    };
  }
  
  return updateTaskContext(currentContext.activeTask);
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function updateTaskContext(taskId) {
  try {
    const context = require('./context');
    const result = context.checkAndUpdateCopilotContext(taskId);
    
    return {
      success: result,
      message: result 
        ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω` 
        : `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}`
    };
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * 
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ—á–∫—É –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á–∏
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞—á–∏
 */
function checkTaskCompletion(taskId) {
  try {
    const tasksData = loadTasks();
    const parts = taskId.toString().split('.');
    const mainTaskId = parseInt(parts[0]);
    
    const task = tasksData.tasks.find(t => t.id === mainTaskId);
    if (!task) {
      return {
        success: false,
        message: `–ó–∞–¥–∞—á–∞ —Å ID ${mainTaskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    if (parts.length === 1) {
      const isDone = task.status === 'done';
      
      return {
        success: true,
        message: isDone 
          ? `–ó–∞–¥–∞—á–∞ #${mainTaskId} "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è` 
          : `–ó–∞–¥–∞—á–∞ #${mainTaskId} "${task.title}" –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${task.status}`,
        data: {
          taskId: mainTaskId,
          title: task.title,
          status: task.status,
          isDone
        }
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
    const subtaskId = parseInt(parts[1]);
    if (!task.subtasks || !Array.isArray(task.subtasks)) {
      return {
        success: false,
        message: `–ó–∞–¥–∞—á–∞ #${mainTaskId} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á`
      };
    }
    
    const subtask = task.subtasks.find(st => st.id === subtaskId);
    if (!subtask) {
      return {
        success: false,
        message: `–ü–æ–¥–∑–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
      };
    }
    
    const isDone = subtask.status === 'done';
    
    return {
      success: true,
      message: isDone 
        ? `–ü–æ–¥–∑–∞–¥–∞—á–∞ #${taskId} "${subtask.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è` 
        : `–ü–æ–¥–∑–∞–¥–∞—á–∞ #${taskId} "${subtask.title}" –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${subtask.status}`,
      data: {
        taskId,
        title: subtask.title,
        status: subtask.status,
        isDone
      }
    };
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: ${error.message}`
    };
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
 * @param {string} command - –¢–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞
 */
function createTaskFromChat(command) {
  const tasksData = loadTasks();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  let title = command.replace(/—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É/i, '').trim();
  if (!title) {
    title = '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞';
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  const newTask = {
    id: getNextTaskId(tasksData.tasks),
    title,
    description: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Ç',
    status: 'pending',
    priority: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    subtasks: [],
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
  tasksData.tasks.push(newTask);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
  if (saveTasks(tasksData)) {
    return `‚úì –ó–∞–¥–∞—á–∞ #${newTask.id} "${newTask.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–û–±–Ω–æ–≤–∏ –∑–∞–¥–∞—á—É ${newTask.id}".`;
  } else {
    return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.';
  }
}

/**
 * –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
function listTasks() {
  const tasksData = loadTasks();
  
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    return '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]".';
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const pending = tasksData.tasks.filter(task => task.status === 'pending');
  const inProgress = tasksData.tasks.filter(task => task.status === 'in-progress');
  const done = tasksData.tasks.filter(task => task.status === 'done');
  const deferred = tasksData.tasks.filter(task => task.status === 'deferred');
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  let response = `üìã –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${tasksData.project} (v${tasksData.version})\n\n`;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const formatTask = (task) => {
    let status = '';
    switch (task.status) {
      case 'done': status = '‚úì'; break;
      case 'in-progress': status = '‚öô'; break;
      case 'deferred': status = '‚è∏'; break;
      case 'pending': 
      default: status = '‚óã'; break;
    }
    
    let result = `${status} [${task.id}] ${task.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority})\n`;
    
    if (task.subtasks && task.subtasks.length > 0) {
      task.subtasks.forEach(subtask => {
        const subtaskStatus = subtask.status === 'done' ? '‚úì' : '‚óã';
        result += `  ${subtaskStatus} ${subtask.id} ${subtask.title}\n`;
      });
    }
    
    return result;
  };
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≥—Ä—É–ø–ø–∞–º
  if (inProgress.length > 0) {
    response += '‚öô –í –ü–†–û–¶–ï–°–°–ï:\n';
    inProgress.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  if (pending.length > 0) {
    response += '‚óã –û–ñ–ò–î–ê–Æ–¢:\n';
    pending.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  if (done.length > 0) {
    response += '‚úì –í–´–ü–û–õ–ù–ï–ù–´:\n';
    done.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  if (deferred.length > 0) {
    response += '‚è∏ –û–¢–õ–û–ñ–ï–ù–´:\n';
    deferred.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  return response;
}

/**
 * –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏
 */
function completeTask(taskId) {
  const tasksData = loadTasks();
  let response = '';
  let completedTitle = '';
  let completedId = '';
  let isSubtask = false;
  let allSubtasksDone = false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –ø–æ–¥–∑–∞–¥–∞—á–µ–π
  if (taskId.includes('.')) {
    const [parentId, subtaskId] = taskId.split('.');
    const parentIdNum = parseInt(parentId);
    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
    const parentTask = tasksData.tasks.find(task => task.id === parentIdNum);
    if (!parentTask) {
      return `‚úó –ó–∞–¥–∞—á–∞ —Å ID ${parentIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∑–∞–¥–∞—á—É
    const subtask = parentTask.subtasks.find(st => st.id === taskId);
    if (!subtask) {
      return `‚úó –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
    // –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    subtask.status = 'done';
    completedTitle = subtask.title;
    completedId = taskId;
    isSubtask = true;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    allSubtasksDone = parentTask.subtasks.every(st => st.status === 'done');
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ—Ç–º–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    if (allSubtasksDone) {
      parentTask.status = 'done';
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
    parentTask.updated_at = new Date().toISOString();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (!saveTasks(tasksData)) {
      return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const summary = `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞ ${taskId} "${subtask.title}"`;
    contextTracker.updateTaskHistory(parentIdNum, 'update', summary);
    if (allSubtasksDone) {
      contextTracker.updateTaskStatus(parentIdNum, 'done', `–í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ (${parentTask.subtasks.length})`);
    }
  } else {
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    const taskIdNum = parseInt(taskId);
    const task = tasksData.tasks.find(t => t.id === taskIdNum);
    if (!task) {
      return `‚úó –ó–∞–¥–∞—á–∞ —Å ID ${taskIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    task.status = 'done';
    task.updated_at = new Date().toISOString();
    if (task.subtasks && task.subtasks.length > 0) {
      task.subtasks.forEach(st => {
        st.status = 'done';
      });
    }
    completedTitle = task.title;
    completedId = taskIdNum;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (!saveTasks(tasksData)) {
      return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    const summary = `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ "${task.title}"${task.subtasks.length > 0 ? ` –∏ –≤—Å–µ –µ—ë –ø–æ–¥–∑–∞–¥–∞—á–∏ (${task.subtasks.length})` : ''}`;
    contextTracker.updateTaskStatus(taskIdNum, 'done', summary);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —è—Ä–∫–∏–π —Å—Ç–∞—Ç—É—Å
  response += `\n\n‚úÖ **–°–¢–ê–¢–£–°: –í–´–ü–û–õ–ù–ï–ù–û!**\n`;
  response += `**${isSubtask ? '–ü–æ–¥–∑–∞–¥–∞—á–∞' : '–ó–∞–¥–∞—á–∞'} #${completedId}: "${completedTitle}"**\n`;
  response += `\n–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: **done**\n`;

  // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∑–∞–¥–∞—á–∞ –∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
  if (isSubtask && allSubtasksDone) {
    response += `\nüéâ –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–¥–∞—á–∞ #${completedId.split('.')[0]} —Ç–∞–∫–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!`;
  }

  // –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
  const pendingTasks = tasksData.tasks.filter(task => task.status === 'pending');
  if (pendingTasks.length > 0) {
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç 1 –¥–æ 3)
    pendingTasks.sort((a, b) => a.priority - b.priority);
    const nextTask = pendingTasks[0];
    response += `\n\n‚û°Ô∏è **–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:** [${nextTask.id}] ${nextTask.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority})`;
    response += `\n–û–ø–∏—Å–∞–Ω–∏–µ: ${nextTask.description}`;
    if (nextTask.subtasks && nextTask.subtasks.length > 0) {
      response += `\n–ü–æ–¥–∑–∞–¥–∞—á–∏: ${nextTask.subtasks.map(st => st.title).join(', ')}`;
    }
    response += `\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: "–î–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É" –∏–ª–∏ "–ù–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${nextTask.id}".`;
  } else {
    response += `\n\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.`;
  }

  response += `\n\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è GitHub Copilot.`;
  return response;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 */
function getNextTask() {
  const tasksData = loadTasks();
  
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    return '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]".';
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å–µ pending —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  const pendingTasks = tasksData.tasks.filter(task => task.status === 'pending');
  
  if (pendingTasks.length === 0) {
    return '–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ pending. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.';
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç 1 –¥–æ 3)
  pendingTasks.sort((a, b) => a.priority - b.priority);
  
  const nextTask = pendingTasks[0];
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ in-progress
  const taskIndex = tasksData.tasks.findIndex(task => task.id === nextTask.id);
  if (taskIndex !== -1) {
    tasksData.tasks[taskIndex].status = 'in-progress';
    tasksData.tasks[taskIndex].updated_at = new Date().toISOString();
    saveTasks(tasksData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    contextTracker.updateTaskStatus(nextTask.id, 'in-progress', `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${nextTask.title}"`);
  }
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  let response = `üöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\n\n[${nextTask.id}] ${nextTask.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority}\n\n${nextTask.description}\n\n`;
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (nextTask.subtasks && nextTask.subtasks.length > 0) {
    response += '–ü–æ–¥–∑–∞–¥–∞—á–∏:\n';
    nextTask.subtasks.forEach(subtask => {
      const statusEmoji = subtask.status === 'done' ? '‚úì' : '‚óã';
      response += `${statusEmoji} ${subtask.id} ${subtask.title}\n`;
    });
  }
  
  response += '\n‚úì –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"';
  response += '\nüí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è GitHub Copilot';
  
  return response;
}

/**
 * –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
function startNextTaskExecution() {
  const result = contextTracker.suggestNextTask();
  
  if (!result.hasNextTask) {
    return `üéâ ${result.message}`;
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Copilot
  return `
üöÄ ${result.message}

üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
–Ø —É–∂–µ –∑–Ω–∞—é –æ –∑–∞–¥–∞—á–µ #${result.nextTask.id} –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –µ—ë –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∞ —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.`;
}

/**
 * –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
function startTaskExecution(taskId) {
  const tasksData = loadTasks();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const task = tasksData.tasks.find(t => t.id === taskId);
  if (!task) {
    return `‚ùå –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
  task.status = 'in-progress';
  task.updated_at = new Date().toISOString();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (!saveTasks(tasksData)) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏';
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
  contextTracker.updateTaskStatus(taskId, 'in-progress', `–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${task.title}"`);
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Copilot
  const copilotContext = contextTracker.prepareTaskContextForCopilot(taskId);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
  let response = `
üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId}: "${task.title}"
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}
${task.description ? `\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}` : ''}

${task.subtasks && task.subtasks.length > 0 ? 
  `–ü–æ–¥–∑–∞–¥–∞—á–∏:\n${task.subtasks.map(st => `- ${st.id} ${st.title}`).join('\n')}` : ''}

üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –æ–±–Ω–æ–≤–ª–µ–Ω. –Ø —É–∂–µ –∑–Ω–∞—é –æ –∑–∞–¥–∞—á–µ #${taskId} –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –µ—ë –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∞ —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.`;
  
  return response;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param {string} comment - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
function updateTaskContext(taskId, comment) {
  const tasksData = loadTasks();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const task = tasksData.tasks.find(t => t.id === taskId);
  if (!task) {
    return `‚ùå –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
  const success = contextTracker.addHistoryEntry(taskId, 'update', comment);
  
  if (!success) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏';
  }
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Copilot
  const copilotContext = contextTracker.prepareTaskContextForCopilot(taskId);
  
  return `
‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${comment}

üí° GitHub Copilot —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.`;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @param {string} comment - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
function updateGeneralContext(comment) {
  if (!comment) {
    return '‚ùå –ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞';
  }
  
  const context = contextTracker.loadContext();
  if (!context) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞';
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
  context.projectState = comment;
  context.lastUpdated = new Date().toISOString();
  
  const success = contextTracker.saveContext(context);
  
  if (!success) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞';
  }
  
  return `
‚úÖ –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${comment}

üí° GitHub Copilot —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.`;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @returns {string} - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
 */
function showTaskContext(taskId) {
  const copilotContext = contextTracker.prepareTaskContextForCopilot(taskId);
  
  if (!copilotContext || copilotContext.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞') || copilotContext.includes('–ù–µ —É–¥–∞–ª–æ—Å—å')) {
    return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #${taskId}`;
  }
  
  return `
üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ #${taskId} –¥–ª—è GitHub Copilot:

${copilotContext}

–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GitHub Copilot –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–¥–æ–º.`;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
 * @returns {string} - –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
 */
function showGeneralContext() {
  const context = contextTracker.loadContext();
  if (!context) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞';
  }
  
  const summary = contextTracker.getProjectSummary();
  
  return `
üìù –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è GitHub Copilot:

${summary}

–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${context.projectState}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(context.lastUpdated).toLocaleString()}

–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GitHub Copilot –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–¥–æ–º.`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π 
 * @param {number} taskId - ID –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–π –∑–∞–¥–∞—á–∏
 * @returns {string} - –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
 */
function checkTaskCompletionAndSuggestNext(taskId) {
  const tasksData = loadTasks();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const task = tasksData.tasks.find(t => t.id === taskId);
  if (!task) {
    return `‚ùå –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
  }
  
  // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
  if (task.status === 'done') {
    return `
‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} "${task.title}" —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.

${startNextTaskExecution()}`;
  }
  
  // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å –µ—ë –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  const prompt = contextTracker.generateTaskCompletionPrompt(taskId);
  
  return `
‚öôÔ∏è –ó–∞–¥–∞—á–∞ #${taskId} "${task.title}" –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

${prompt}

–û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞, –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π.
–ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ–π.`;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @returns {string} - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
function showTaskHistory(taskId) {
  const history = contextTracker.getFormattedTaskHistory(taskId);
  
  return `
üìú ${history}

–≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è GitHub Copilot –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–¥–æ–º.`;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
 * @returns {string} - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
function showAllTasksHistory() {
  const history = contextTracker.getFormattedFullHistory();
  
  return `
üìú ${history}

–≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è GitHub Copilot –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–¥–æ–º.`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞ –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–ª–∞–Ω–∞
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
 */
function generateTasksFromPlan(command) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
  const planTextRegex = /—Å–æ–∑–¥–∞–π (?:—Å–ø–∏—Å–æ–∫ )?–∑–∞–¥–∞—á(–∏)? –∏–∑ (?:–ø–ª–∞–Ω–∞|–Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è)(?:\s*[:Ôºö]\s*|\s+)(.*)/is;
  const match = command.match(planTextRegex);
  
  let planText = '';
  if (match && match[2]) {
    planText = match[2].trim();
  } else {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–ª–∞–Ω, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    planText = command.replace(/—Å–æ–∑–¥–∞–π (?:—Å–ø–∏—Å–æ–∫ )?–∑–∞–¥–∞—á(?:–∏)? –∏–∑ (?:–ø–ª–∞–Ω–∞|–Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è)/i, '').trim();
  }
  
  if (!planText) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–ª–∞–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–ª–∞–Ω –∑–∞–¥–∞—á.';
  }
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞)
  const taskLines = planText
    .split(/\n+|\\n+/) // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    .map(line => line.trim())
    .filter(line => line.length > 0 && !line.match(/^[#\-\*]+\s*$/)); // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ä–∞–∑–±–∏—Ç –ª–∏ –ø–ª–∞–Ω –Ω–∞ –ø—É–Ω–∫—Ç—ã –∏–ª–∏ –ø–æ–¥–ø—É–Ω–∫—Ç—ã
  const bulletPointRegex = /^([#*\-\d]+[\.\)]*\s+|[\d]+[\.\)]+\s+)/;
  const hasBulletPoints = taskLines.some(line => bulletPointRegex.test(line));
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  const tasksData = loadTasks();
  const newTasks = [];
  
  if (hasBulletPoints) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç—ã –ø–ª–∞–Ω–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    let currentTask = null;
    let currentSubtasks = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    const getIndentLevel = (line) => {
      const match = line.match(/^(\s*)/);
      return match ? match[1].length : 0;
    };
    
    const lines = taskLines.map(line => ({
      text: line.replace(bulletPointRegex, '').trim(),
      indent: getIndentLevel(line),
      hasBullet: bulletPointRegex.test(line)
    }));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–∞–¥–∞—á –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const baseIndentLevel = lines.filter(l => l.hasBullet).reduce((min, l) => Math.min(min, l.indent), Infinity);
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö –≤ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–∑–∞–¥–∞—á–∏
    for (const line of lines) {
      if (line.hasBullet && (line.indent === baseIndentLevel || currentTask === null)) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if (currentTask !== null) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É
          newTasks.push({
            ...currentTask,
            subtasks: currentSubtasks
          });
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        currentTask = {
          id: getNextTaskId(tasksData.tasks),
          title: line.text,
          description: `–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∞: ${line.text}`,
          status: 'pending',
          priority: 2,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        currentSubtasks = [];
      } else if (line.hasBullet && currentTask !== null) {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∑–∞–¥–∞—á–∞
        currentSubtasks.push({
          id: `${currentTask.id}.${currentSubtasks.length + 1}`,
          title: line.text,
          status: 'pending'
        });
      } else if (currentTask !== null) {
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        currentTask.description += '\n' + line.text;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É
    if (currentTask !== null) {
      newTasks.push({
        ...currentTask,
        subtasks: currentSubtasks
      });
    }
  } else {
    // –ï—Å–ª–∏ –ø—É–Ω–∫—Ç—ã –Ω–µ –≤—ã–¥–µ–ª–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    taskLines.forEach((line, index) => {
      const taskId = getNextTaskId(tasksData.tasks) + index;
      
      newTasks.push({
        id: taskId,
        title: line,
        description: `–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∞: ${line}`,
        status: 'pending',
        priority: 2,
        subtasks: [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    });
  }
  
  // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
  if (newTasks.length === 0) {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–ª–∞–Ω.';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫
  tasksData.tasks = [...tasksData.tasks, ...newTasks];
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
  if (saveTasks(tasksData)) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    let response = `‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞: ${newTasks.length}\n\n`;
    
    newTasks.forEach(task => {
      response += `üîπ #${task.id} ${task.title}\n`;
      
      if (task.subtasks.length > 0) {
        task.subtasks.forEach(subtask => {
          response += `  ‚ó¶ ${subtask.id} ${subtask.title}\n`;
        });
      }
      
      response += '\n';
    });
    
    response += `
üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ù–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"`;
    
    return response;
  } else {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏.';
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args.join(' ');
  
  if (!command) {
    console.log(chalk.yellow('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:'));
    console.log(chalk.blue('npm run task-master:chat "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"'));
    process.exit(1);
  }
  
  const result = processCommand(command);
  console.log(result);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  processCommand
};