#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Task Master —á–µ—Ä–µ–∑ —á–∞—Ç
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
const isGlobalMode = process.env.TASK_MASTER_MODE === 'global';
const tasksDir = process.env.TASK_MASTER_DIR || path.join(process.cwd(), 'tasks');
const tasksFile = process.env.TASK_MASTER_FILE || path.join(tasksDir, 'tasks.json');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
function loadTasks() {
  if (!fs.existsSync(tasksFile)) {
    console.log(chalk.red(`‚úó –§–∞–π–ª ${path.basename(tasksFile)} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é task-master init –∏–ª–∏ npm run task-master:init`));
    process.exit(1);
  }
  
  try {
    const data = fs.readFileSync(tasksFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks(tasksData) {
  try {
    fs.writeFileSync(tasksFile, JSON.stringify(tasksData, null, 2));
    return true;
  } catch (error) {
    console.log(chalk.red(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ ID –∑–∞–¥–∞—á–∏
function getNextTaskId(tasks) {
  if (tasks.length === 0) return 1;
  return Math.max(...tasks.map(task => task.id)) + 1;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –∏–∑ —á–∞—Ç–∞
 */
function processCommand(command) {
  // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const lowerCommand = command.toLowerCase();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  if (lowerCommand.startsWith('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É')) {
    return createTaskFromChat(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  if (lowerCommand.includes('–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á') || lowerCommand.includes('–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏')) {
    return listTasks();
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  const completeRegex = /–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É (\d+(?:\.\d+)?) –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω(—É—é|—É—é)/i;
  const completeMatch = command.match(completeRegex);
  if (completeMatch) {
    return completeTask(completeMatch[1]);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
  if (lowerCommand.includes('–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É') || lowerCommand.includes('–∫–∞–∫–∞—è —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')) {
    return getNextTask();
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  if (lowerCommand.startsWith('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É')) {
    return generateTaskFromDescription(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
  if (lowerCommand.startsWith('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏') || lowerCommand.startsWith('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏')) {
    return generateMultipleTasks(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞
  if (lowerCommand.includes('—Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞') || 
      lowerCommand.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞') ||
      lowerCommand.includes('—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
    return generateTasksFromPlan(command);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
  if (lowerCommand.includes('–ø–æ–º–æ—â—å') || lowerCommand.includes('—Å–ø—Ä–∞–≤–∫–∞') || 
      lowerCommand.includes('–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å') || lowerCommand.includes('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')) {
    return showHelp();
  }
  
  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
  return `–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ "—Å–ø—Ä–∞–≤–∫–∞" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
 * @param {string} command - –¢–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞
 */
function createTaskFromChat(command) {
  const tasksData = loadTasks();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  let title = command.replace(/—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É/i, '').trim();
  if (!title) {
    title = '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞';
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  const newTask = {
    id: getNextTaskId(tasksData.tasks),
    title,
    description: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Ç',
    status: 'pending',
    priority: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    subtasks: [],
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
  tasksData.tasks.push(newTask);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
  if (saveTasks(tasksData)) {
    return `‚úì –ó–∞–¥–∞—á–∞ #${newTask.id} "${newTask.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–û–±–Ω–æ–≤–∏ –∑–∞–¥–∞—á—É ${newTask.id}".`;
  } else {
    return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.';
  }
}

/**
 * –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
function listTasks() {
  const tasksData = loadTasks();
  
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    return '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]".';
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const pending = tasksData.tasks.filter(task => task.status === 'pending');
  const inProgress = tasksData.tasks.filter(task => task.status === 'in-progress');
  const done = tasksData.tasks.filter(task => task.status === 'done');
  const deferred = tasksData.tasks.filter(task => task.status === 'deferred');
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  let response = `üìã –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${tasksData.project} (v${tasksData.version})\n\n`;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const formatTask = (task) => {
    let status = '';
    switch (task.status) {
      case 'done': status = '‚úì'; break;
      case 'in-progress': status = '‚öô'; break;
      case 'deferred': status = '‚è∏'; break;
      case 'pending': 
      default: status = '‚óã'; break;
    }
    
    let result = `${status} [${task.id}] ${task.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority})\n`;
    
    if (task.subtasks && task.subtasks.length > 0) {
      task.subtasks.forEach(subtask => {
        const subtaskStatus = subtask.status === 'done' ? '‚úì' : '‚óã';
        result += `  ${subtaskStatus} ${subtask.id} ${subtask.title}\n`;
      });
    }
    
    return result;
  };
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≥—Ä—É–ø–ø–∞–º
  if (inProgress.length > 0) {
    response += '‚öô –í –ü–†–û–¶–ï–°–°–ï:\n';
    inProgress.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  if (pending.length > 0) {
    response += '‚óã –û–ñ–ò–î–ê–Æ–¢:\n';
    pending.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  if (done.length > 0) {
    response += '‚úì –í–´–ü–û–õ–ù–ï–ù–´:\n';
    done.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  if (deferred.length > 0) {
    response += '‚è∏ –û–¢–õ–û–ñ–ï–ù–´:\n';
    deferred.forEach(task => {
      response += formatTask(task);
    });
    response += '\n';
  }
  
  return response;
}

/**
 * –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
 * @param {string} taskId - ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏
 */
function completeTask(taskId) {
  const tasksData = loadTasks();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –ø–æ–¥–∑–∞–¥–∞—á–µ–π
  if (taskId.includes('.')) {
    const [parentId, subtaskId] = taskId.split('.');
    const parentIdNum = parseInt(parentId);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
    const parentTask = tasksData.tasks.find(task => task.id === parentIdNum);
    
    if (!parentTask) {
      return `‚úó –ó–∞–¥–∞—á–∞ —Å ID ${parentIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∑–∞–¥–∞—á—É
    const subtask = parentTask.subtasks.find(st => st.id === taskId);
    
    if (!subtask) {
      return `‚úó –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    subtask.status = 'done';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const allSubtasksDone = parentTask.subtasks.every(st => st.status === 'done');
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ—Ç–º–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    if (allSubtasksDone) {
      parentTask.status = 'done';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
    parentTask.updated_at = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (saveTasks(tasksData)) {
      let response = `‚úì –ü–æ–¥–∑–∞–¥–∞—á–∞ #${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`;
      if (allSubtasksDone) {
        response += `\n‚úì –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–¥–∞—á–∞ #${parentIdNum} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`;
      }
      return response;
    } else {
      return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    }
  } else {
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    const taskIdNum = parseInt(taskId);
    const task = tasksData.tasks.find(t => t.id === taskIdNum);
    
    if (!task) {
      return `‚úó –ó–∞–¥–∞—á–∞ —Å ID ${taskIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    task.status = 'done';
    task.updated_at = new Date().toISOString();
    
    if (task.subtasks && task.subtasks.length > 0) {
      task.subtasks.forEach(st => {
        st.status = 'done';
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (saveTasks(tasksData)) {
      return `‚úì –ó–∞–¥–∞—á–∞ #${taskIdNum} "${task.title}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`;
    } else {
      return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    }
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
 */
function getNextTask() {
  const tasksData = loadTasks();
  
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    return '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]".';
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å–µ pending —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  const pendingTasks = tasksData.tasks.filter(task => task.status === 'pending');
  
  if (pendingTasks.length === 0) {
    return '–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ pending. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.';
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç 1 –¥–æ 3)
  pendingTasks.sort((a, b) => a.priority - b.priority);
  
  const nextTask = pendingTasks[0];
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ in-progress
  const taskIndex = tasksData.tasks.findIndex(task => task.id === nextTask.id);
  if (taskIndex !== -1) {
    tasksData.tasks[taskIndex].status = 'in-progress';
    tasksData.tasks[taskIndex].updated_at = new Date().toISOString();
    saveTasks(tasksData);
  }
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  let response = `üöÄ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\n\n[${nextTask.id}] ${nextTask.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${nextTask.priority}\n\n${nextTask.description}\n\n`;
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (nextTask.subtasks && nextTask.subtasks.length > 0) {
    response += '–ü–æ–¥–∑–∞–¥–∞—á–∏:\n';
    nextTask.subtasks.forEach(subtask => {
      const statusEmoji = subtask.status === 'done' ? '‚úì' : '‚óã';
      response += `${statusEmoji} ${subtask.id} ${subtask.title}\n`;
    });
  }
  
  response += '\n‚úì –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"';
  
  return response;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
 */
function generateTaskFromDescription(command) {
  const tasksData = loadTasks();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const description = command.replace(/—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É/i, '').trim();
  if (!description) {
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É [–æ–ø–∏—Å–∞–Ω–∏–µ]"';
  }
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = description.split(/\n|\\n/).filter(line => line.trim() !== '');
  
  // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –±—É–¥—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
  let title = '';
  if (lines.length > 0) {
    title = lines[0].trim();
    
    // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
    if (title.split(' ').length > 5) {
      title = title.split(' ').slice(0, 5).join(' ') + '...';
    }
  } else {
    title = description.split(' ').slice(0, 5).join(' ');
    if (description.split(' ').length > 5) {
      title += '...';
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ * –∏–ª–∏ —Ü–∏—Ñ—Ä—ã —Å —Ç–æ—á–∫–æ–π)
  const subtasksRegex = /^(\-|\*|\d+\.)\s+(.+)$/;
  const subtasksLines = lines.filter(line => subtasksRegex.test(line.trim()));
  
  const subtasks = subtasksLines.map((line, index) => {
    return {
      id: `${getNextTaskId(tasksData.tasks)}.${index + 1}`,
      title: line.trim().replace(subtasksRegex, '$2'),
      status: 'pending'
    };
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  const newTask = {
    id: getNextTaskId(tasksData.tasks),
    title,
    description,
    status: 'pending',
    priority: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    subtasks,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
  tasksData.tasks.push(newTask);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
  if (saveTasks(tasksData)) {
    let response = `‚úì –ó–∞–¥–∞—á–∞ #${newTask.id} "${newTask.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n`;
    response += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${newTask.priority}\n`;
    
    if (subtasks.length > 0) {
      response += `–ü–æ–¥–∑–∞–¥–∞—á–∏:\n`;
      subtasks.forEach(subtask => {
        response += `‚óã ${subtask.id} ${subtask.title}\n`;
      });
    }
    
    return response;
  } else {
    return '‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.';
  }
}

/**
 * –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
function generateMultipleTasks(command) {
  const tasksData = loadTasks();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á
  let description = command.replace(/—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏/i, '').trim();
  if (!description) {
    return '–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ [–æ–ø–∏—Å–∞–Ω–∏–µ]" –∏ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é "###"';
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "###"
  const taskDescriptions = description.split(/###/).map(desc => desc.trim()).filter(desc => desc);
  
  if (taskDescriptions.length === 0) {
    return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ä–∞–∑–¥–µ–ª—è–µ—Ç–µ –∑–∞–¥–∞—á–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ "###"';
  }
  
  const createdTasks = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const taskDesc of taskDescriptions) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = taskDesc.split(/\n|\\n/).filter(line => line.trim() !== '');
    
    if (lines.length === 0) continue;
    
    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const title = lines[0].trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    let priority = 2; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const priorityRegex = /\[(?:P|p|–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç)[:=]?\s*([1-3])\]/;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const titlePriorityMatch = title.match(priorityRegex);
    let cleanTitle = title;
    
    if (titlePriorityMatch) {
      priority = parseInt(titlePriorityMatch[1]);
      cleanTitle = title.replace(priorityRegex, '').trim();
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      for (const line of lines.slice(1)) {
        const linePriorityMatch = line.match(priorityRegex);
        if (linePriorityMatch) {
          priority = parseInt(linePriorityMatch[1]);
          break;
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å - –∏–ª–∏ * –∏–ª–∏ —Ü–∏—Ñ—Ä—ã —Å —Ç–æ—á–∫–æ–π)
    const subtasksRegex = /^(\-|\*|\d+\.)\s+(.+)$/;
    const subtasksLines = lines.slice(1).filter(line => subtasksRegex.test(line.trim()));
    
    const taskId = getNextTaskId(tasksData.tasks);
    
    const subtasks = subtasksLines.map((line, index) => {
      return {
        id: `${taskId}.${index + 1}`,
        title: line.trim().replace(subtasksRegex, '$2'),
        status: 'pending'
      };
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const taskDescription = lines.slice(1)
      .filter(line => !subtasksRegex.test(line.trim()) && !priorityRegex.test(line.trim()))
      .join('\n').trim() || '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Ç';
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    const newTask = {
      id: taskId,
      title: cleanTitle,
      description: taskDescription,
      status: 'pending',
      priority: priority,
      subtasks,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
    tasksData.tasks.push(newTask);
    createdTasks.push(newTask);
  }
  
  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
  if (createdTasks.length === 0) {
    return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.';
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
  if (saveTasks(tasksData)) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º emoji –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let response = `‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${createdTasks.length}\n\n`;
    
    createdTasks.forEach(task => {
      // Emoji –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      let priorityEmoji = '';
      switch(task.priority) {
        case 1: priorityEmoji = 'üî¥'; break; // –í—ã—Å–æ–∫–∏–π
        case 2: priorityEmoji = 'üü°'; break; // –°—Ä–µ–¥–Ω–∏–π
        case 3: priorityEmoji = 'üü¢'; break; // –ù–∏–∑–∫–∏–π
      }
      
      response += `${priorityEmoji} [${task.id}] ${task.title}\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Ä–∞–≤–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
      if (task.description && task.description !== '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —á–∞—Ç' && task.description !== task.title) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        const shortDesc = task.description.length > 100 
          ? task.description.substring(0, 100) + '...' 
          : task.description;
        response += `üìù ${shortDesc}\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
      const priorityText = task.priority === 1 ? '–í—ã—Å–æ–∫–∏–π' : (task.priority === 2 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π');
      response += `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityText}\n`;
      
      if (task.subtasks.length > 0) {
        response += `üìã –ü–æ–¥–∑–∞–¥–∞—á–∏ (${task.subtasks.length}):\n`;
        task.subtasks.forEach(subtask => {
          response += `  ‚óã ${subtask.id} ${subtask.title}\n`;
        });
      }
      response += '\n';
    });
    
    return response;
  } else {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏.';
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Task Master
 * @returns {string} - –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
 */
function showHelp() {
  return `üìö –°–ü–†–ê–í–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ TASK MASTER üìö

üîπ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:

‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:
  - "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]" - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
  - "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ [–æ–ø–∏—Å–∞–Ω–∏–µ]" - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
  - "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É [–æ–ø–∏—Å–∞–Ω–∏–µ]" - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  - "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ [–æ–ø–∏—Å–∞–Ω–∏–µ]" - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  - "–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞" - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è

‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:
  - "–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" –∏–ª–∏ "–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏" - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á
  - "–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É X –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é" - –æ—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  - "–î–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É" - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏

üîπ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –ó–ê–î–ê–ß:

‚úÖ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á:
  - –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ "###"
  - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ—ë –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
  - –°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "-" –∏–ª–∏ "*", —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏

‚úÖ –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
  - –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–∫—É [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:X] –∏–ª–∏ [P:X], –≥–¥–µ X - —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3:
    1 - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç üî¥
    2 - —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç üü° (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    3 - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç üü¢

üîπ –ü–†–ò–ú–ï–†–´:

‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏:
  –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—Ö–æ–¥–∞
  –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–ª—è–º–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
  - –°–æ–∑–¥–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
  - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π
  - –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  [–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:1]

‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á:
  –°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ [P:1]
  - –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  
  ###
  
  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:2]
  - –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
  - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
  - –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è API
  
  ###
  
  –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è [P:3]
  - –û–ø–∏—Å–∞—Ç—å API
  - –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞:
  –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞
  (–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Å—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á)
`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞
 * @param {string} command - –ö–æ–º–∞–Ω–¥–∞
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 */
function generateTasksFromPlan(command) {
  // –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —á–∞—Ç–µ
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏
  
  // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const cleanCommand = command.replace(/—Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞|—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è/i, '').trim();
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  // –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
  
  const tasksData = loadTasks();
  const createdTasks = [];
  
  if (cleanCommand) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
    const paragraphs = cleanCommand.split(/\n\n|\r\n\r\n/).filter(p => p.trim());
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
    for (let i = 0; i < paragraphs.length; i++) {
      const paragraph = paragraphs[i].trim();
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –∞–±–∑–∞—Ü –Ω–∞ —Å—Ç—Ä–æ–∫–∏
      const lines = paragraph.split(/\n|\r\n/).filter(line => line.trim());
      
      if (lines.length === 0) continue;
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
      const title = lines[0].trim();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      let priority = Math.min(Math.max(Math.ceil((i + 1) / 3), 1), 3);
      
      // –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      const lowPriorityKeywords = ["–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", "–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–ø–æ—Ç–æ–º", "–≤ –±—É–¥—É—â–µ–º"];
      const highPriorityKeywords = ["–≤–∞–∂–Ω–æ", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "—Å—Ä–æ—á–Ω–æ", "–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"];
      
      const lowerParagraph = paragraph.toLowerCase();
      
      if (lowPriorityKeywords.some(keyword => lowerParagraph.includes(keyword))) {
        priority = 3; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      } else if (highPriorityKeywords.some(keyword => lowerParagraph.includes(keyword))) {
        priority = 1; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      }
      
      // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏, –≤—ã–¥–µ–ª—è—è –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞—Ü–∏—é
      // –¢–∞–∫–∂–µ –∏—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      const subtaskRegex = /^[\-\*]\s+(.+)$/;
      const actionSentenceRegex = /([–ê-–Ø][^.!?]*?(?:—Å–æ–∑–¥–∞—Ç—å|—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å|—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å|–¥–æ–±–∞–≤–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å|–≤–Ω–µ–¥—Ä–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)[^.!?]*[.!?])/g;
      
      const explicitSubtasks = lines.slice(1)
        .filter(line => subtaskRegex.test(line.trim()))
        .map(line => line.trim().replace(subtaskRegex, '$1'));
      
      const actionSentences = [];
      let match;
      
      // –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      while ((match = actionSentenceRegex.exec(paragraph)) !== null) {
        actionSentences.push(match[1].trim());
      }
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è–≤–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      const allSubtasks = [...explicitSubtasks];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è-–¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —è–≤–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö
      actionSentences.forEach(sentence => {
        const sentenceLower = sentence.toLowerCase();
        if (!allSubtasks.some(subtask => 
            subtask.toLowerCase().includes(sentenceLower) || 
            sentenceLower.includes(subtask.toLowerCase()))) {
          allSubtasks.push(sentence);
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const taskId = getNextTaskId(tasksData.tasks);
      
      const subtasks = allSubtasks.map((subtaskTitle, index) => ({
        id: `${taskId}.${index + 1}`,
        title: subtaskTitle,
        status: 'pending'
      }));
      
      const taskDescription = lines.slice(1)
        .filter(line => !subtaskRegex.test(line.trim()))
        .join('\n').trim() || '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞';
      
      const newTask = {
        id: taskId,
        title,
        description: taskDescription,
        status: 'pending',
        priority,
        subtasks,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      tasksData.tasks.push(newTask);
      createdTasks.push(newTask);
    }
  }
  
  // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
  if (createdTasks.length === 0) {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const defaultTasks = [
      {
        title: "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
        priority: 1,
        description: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
        subtasks: [
          "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —Ü–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞",
          "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
          "–û—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
          "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç"
        ]
      },
      {
        title: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        priority: 1,
        description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
        subtasks: [
          "–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞",
          "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
          "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ API –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
          "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
        ]
      },
      {
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        priority: 1,
        description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        subtasks: [
          "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫–æ–¥–∞",
          "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD",
          "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
          "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        ]
      },
      {
        title: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
        priority: 2,
        description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞",
        subtasks: [
          "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö",
          "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏",
          "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
          "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        ]
      },
      {
        title: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        priority: 2,
        description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö",
        subtasks: [
          "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
          "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
          "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
          "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        ]
      },
      {
        title: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        priority: 3,
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
        subtasks: [
          "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ API",
          "–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
          "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"
        ]
      },
      {
        title: "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ",
        priority: 2,
        description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ø—É—Å–∫—É –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
        subtasks: [
          "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω-–æ–∫—Ä—É–∂–µ–Ω–∏—è",
          "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
          "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
          "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
        ]
      }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º—É
    for (const taskTemplate of defaultTasks) {
      const taskId = getNextTaskId(tasksData.tasks);
      
      const subtasks = taskTemplate.subtasks.map((subtaskTitle, index) => ({
        id: `${taskId}.${index + 1}`,
        title: subtaskTitle,
        status: 'pending'
      }));
      
      const newTask = {
        id: taskId,
        title: taskTemplate.title,
        description: taskTemplate.description,
        status: 'pending',
        priority: taskTemplate.priority,
        subtasks,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      tasksData.tasks.push(newTask);
      createdTasks.push(newTask);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
  if (saveTasks(tasksData)) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    let response = `‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${createdTasks.length}\n\n`;
    
    createdTasks.forEach(task => {
      // Emoji –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      let priorityEmoji = '';
      switch(task.priority) {
        case 1: priorityEmoji = 'üî¥'; break; // –í—ã—Å–æ–∫–∏–π
        case 2: priorityEmoji = 'üü°'; break; // –°—Ä–µ–¥–Ω–∏–π
        case 3: priorityEmoji = 'üü¢'; break; // –ù–∏–∑–∫–∏–π
      }
      
      response += `${priorityEmoji} [${task.id}] ${task.title}\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
      if (task.subtasks.length > 0) {
        response += `üìã –ü–æ–¥–∑–∞–¥–∞—á–∏ (${task.subtasks.length}):\n`;
        task.subtasks.forEach(subtask => {
          response += `  ‚óã ${subtask.id} ${subtask.title}\n`;
        });
      }
      response += '\n';
    });
    
    response += "üìå –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏\" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏–ª–∏ \"–î–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É\" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.";
    
    return response;
  } else {
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏.';
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args.join(' ');
  
  if (!command) {
    console.log(chalk.yellow('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:'));
    console.log(chalk.blue('npm run task-master:chat "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"'));
    process.exit(1);
  }
  
  const result = processCommand(command);
  console.log(result);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  processCommand
};