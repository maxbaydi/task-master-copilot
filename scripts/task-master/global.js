#!/usr/bin/env node

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Task Master
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Task Master –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const { execSync, spawnSync } = require('child_process');
const chalk = require('chalk');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
const homeDir = os.homedir();
const globalTasksDir = path.join(homeDir, '.task-master');
const globalTasksFile = path.join(globalTasksDir, 'tasks.json');
const currentDir = process.cwd();
const localTasksDir = path.join(currentDir, 'tasks');
const localTasksFile = path.join(localTasksDir, 'tasks.json');

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(globalTasksDir)) {
  fs.mkdirSync(globalTasksDir, { recursive: true });
  console.log(chalk.green('‚úì –°–æ–∑–¥–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è Task Master'));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
function determineMode(command) {
  // –ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ init –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (command === 'init') {
    return {
      mode: 'global', // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–æ init —Å–æ–∑–¥–∞—Å—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      tasksFile: localTasksFile,
      tasksDir: localTasksDir
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ tasks.json
  const hasLocalTasks = fs.existsSync(localTasksFile);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π
  return {
    mode: hasLocalTasks ? 'local' : 'global',
    tasksFile: hasLocalTasks ? localTasksFile : globalTasksFile,
    tasksDir: hasLocalTasks ? localTasksDir : globalTasksDir
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
  console.log(chalk.bold('\nüìã Task Master - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n'));
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-master [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]\n');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log(`  ${chalk.cyan('init')}                  - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á`);
  console.log(`  ${chalk.cyan('list')}                  - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á`);
  console.log(`  ${chalk.cyan('next')}                  - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É`);
  console.log(`  ${chalk.cyan('generate')}              - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è`);
  console.log(`  ${chalk.cyan('complete')} <id>         - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é`);
  console.log(`  ${chalk.cyan('chat')} "–∫–æ–º–∞–Ω–¥–∞"        - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞`);
  console.log(`  ${chalk.cyan('help')}                  - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n`);
  
  console.log(chalk.bold('–ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:'));
  console.log(`  ${chalk.cyan('–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]')}               - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É`);
  console.log(`  ${chalk.cyan('–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ [–æ–ø–∏—Å–∞–Ω–∏–µ]')}               - –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á`);
  console.log(`  ${chalk.cyan('–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞')}             - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞`);
  console.log(`  ${chalk.cyan('–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏')}                         - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á`);
  console.log(`  ${chalk.cyan('–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É X –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é')}        - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é`);
  console.log(`  ${chalk.cyan('–î–∞–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É')}                   - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É`);
  console.log(`  ${chalk.cyan('–°–ø—Ä–∞–≤–∫–∞')}                               - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n`);
  
  console.log(chalk.bold('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:'));
  const { mode } = determineMode();
  console.log(`  –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${mode === 'local' ? chalk.green('–ª–æ–∫–∞–ª—å–Ω—ã–π') : chalk.blue('–≥–ª–æ–±–∞–ª—å–Ω—ã–π')}`);
  console.log(`  –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ.`);
  console.log(`  –í –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–±—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–∑ –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥
function runCommand() {
  try {
    const args = process.argv.slice(2);
    const command = args[0] || 'help';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
    const { mode, tasksFile, tasksDir } = determineMode(command);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
    const scriptDir = path.dirname(__filename);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –∑–∞–¥–∞—á
    process.env.TASK_MASTER_FILE = tasksFile;
    process.env.TASK_MASTER_DIR = tasksDir;
    process.env.TASK_MASTER_MODE = mode;
    
    console.log(chalk.blue(`–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${mode}`));
    console.log(chalk.blue(`–§–∞–π–ª –∑–∞–¥–∞—á: ${tasksFile}`));
    console.log(chalk.blue(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: ${scriptDir}`));
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
    const commandMap = {
      'init': path.join(scriptDir, 'init.js'),
      'list': path.join(scriptDir, 'list.js'),
      'next': path.join(scriptDir, 'next.js'),
      'generate': path.join(scriptDir, 'generate.js'),
      'complete': path.join(scriptDir, 'complete.js'),
      'chat': path.join(scriptDir, 'chat.js'),
      'help': null // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    };
    
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    if (!commandMap[command]) {
      if (command === 'help') {
        showHelp();
      } else {
        console.log(chalk.red(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`));
        showHelp();
      }
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–ø—Ç–∞
    const scriptPath = commandMap[command];
    if (!fs.existsSync(scriptPath)) {
      console.log(chalk.red(`–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç ${scriptPath} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
      console.log(chalk.yellow(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${scriptDir}:`));
      const files = fs.readdirSync(scriptDir);
      files.forEach(file => {
        console.log(`  - ${file}`);
      });
      return;
    }
    
    console.log(chalk.green(`–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç: ${scriptPath}`));
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
    const remainingArgs = args.slice(1);
    
    if (command === 'chat') {
      // –î–ª—è –∫–æ–º–∞–Ω–¥—ã chat, –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ –µ–¥–∏–Ω—É—é —Å—Ç—Ä–æ–∫—É
      const chatCommand = remainingArgs.join(' ');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç chat.js –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ spawn –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞
      const result = spawnSync('node', [scriptPath, chatCommand], {
        stdio: 'inherit',
        env: process.env
      });
      
      if (result.error) {
        console.log(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${result.error.message}`));
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
      const result = spawnSync('node', [scriptPath, ...remainingArgs], {
        stdio: 'inherit',
        env: process.env
      });
      
      if (result.error) {
        console.log(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${result.error.message}`));
      }
    }
  } catch (error) {
    console.log(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${error.message}`));
    console.log(chalk.red(`–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`));
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
runCommand();