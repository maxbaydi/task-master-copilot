#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const contextTracker = require('./context-tracker');
const copilot = require('./copilot');

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö
 * 
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∑–∞–¥–∞—á–∞–º–∏
 */
function loadTasks() {
  const tasksPath = path.join(process.cwd(), 'tasks', 'tasks.json');
  if (!fs.existsSync(tasksPath)) {
    return { tasks: [] };
  }
  
  try {
    const tasksData = JSON.parse(fs.readFileSync(tasksPath, 'utf8'));
    return tasksData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', error);
    return { tasks: [] };
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @returns {Object|null} - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function loadTaskContext(taskId) {
  const contextPath = path.join(process.cwd(), 'tasks', 'context', `task-${taskId}.json`);
  if (!fs.existsSync(contextPath)) {
    return null;
  }
  
  try {
    const contextData = JSON.parse(fs.readFileSync(contextPath, 'utf8'));
    return contextData;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ #${taskId}:`, error);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {Object} contextData - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
 */
function saveTaskContext(taskId, contextData) {
  try {
    const contextDir = path.join(process.cwd(), 'tasks', 'context');
    if (!fs.existsSync(contextDir)) {
      fs.mkdirSync(contextDir, { recursive: true });
    }
    
    const contextPath = path.join(contextDir, `task-${taskId}.json`);
    fs.writeFileSync(contextPath, JSON.stringify(contextData, null, 2), 'utf8');
    return true;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ #${taskId}:`, error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
async function checkAndUpdateCopilotContext(taskId) {
  const tasksData = loadTasks();
  const task = tasksData.tasks.find(t => t.id === taskId);
  
  if (!task) {
    console.error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return false;
  }
  
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
  const contextData = loadTaskContext(taskId);
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Copilot
  return await copilot.saveFormattedCopilotContext(task, contextData);
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {string|null} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Copilot –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function prepareCopilotContext(taskId) {
  // –ï—Å–ª–∏ taskId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
  if (!taskId) {
    const currentContext = await contextTracker.getCurrentContext();
    if (currentContext && currentContext.activeTask) {
      taskId = currentContext.activeTask;
    } else {
      console.error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
      return null;
    }
  }
  
  if (await checkAndUpdateCopilotContext(taskId)) {
    return await copilot.getSavedCopilotContext();
  }
  
  return null;
}

/**
 * –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è –Ω–µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç
 * 
 * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function suggestTaskAndPrepareContext() {
  const tasksData = loadTasks();
  if (!tasksData.tasks || tasksData.tasks.length === 0) {
    return null;
  }
  
  // –ù–∞–π—Ç–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  const pendingTasks = tasksData.tasks.filter(t => t.status !== 'done');
  if (pendingTasks.length === 0) {
    return {
      message: '–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.',
      allTasksDone: true
    };
  }
  
  // –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  let suggestedTask = pendingTasks.find(t => t.priority === 'high');
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  if (!suggestedTask) {
    suggestedTask = pendingTasks[0];
  }
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
  await checkAndUpdateCopilotContext(suggestedTask.id);
  
  return {
    message: `–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É #${suggestedTask.id}: ${suggestedTask.title}`,
    taskId: suggestedTask.id,
    task: suggestedTask
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0] || 'summary';
const taskId = args[1] ? parseInt(args[1]) : null;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
  console.log(chalk.bold('\nüìã Task Master: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–∞\n'));
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-master context [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]\n');
  
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log(`  ${chalk.cyan('summary')}              - –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
  console.log(`  ${chalk.cyan('history')} [taskId]     - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á`);
  console.log(`  ${chalk.cyan('init')}                 - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞`);
  console.log(`  ${chalk.cyan('update')} <taskId>      - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏`);
  console.log(`  ${chalk.cyan('copilot')} [taskId]     - –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot`);
  console.log(`  ${chalk.cyan('check-context')} <taskId> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot`);
  console.log(`  ${chalk.cyan('suggest')}              - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç`);
  console.log(`  ${chalk.cyan('help')}                 - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n`);
  
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  task-master context                   - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É');
  console.log('  task-master context history 3         - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ #3');
  console.log('  task-master context update 2 "–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"  - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ #2');
  console.log('  task-master context copilot 2         - –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ #2 –¥–ª—è GitHub Copilot');
  console.log('  task-master context suggest           - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏\n');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {string} summary - –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 */
function updateTaskContext(taskId, summary) {
  if (!summary) {
    console.log(chalk.yellow('‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã'));
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –µ—ë —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  const tasks = contextTracker.loadTasks();
  if (!tasks) return;
  
  const task = tasks.tasks.find(t => t.id === taskId);
  if (!task) {
    console.log(chalk.red(`‚úó –ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`));
    return;
  }
  
  // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –º–µ–Ω—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
  let status = task.status;
  if (status !== 'in-progress') {
    status = 'in-progress';
    console.log(chalk.blue(`‚Ñπ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #${taskId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"`));
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
  if (contextTracker.updateTaskStatus(taskId, status, summary)) {
    console.log(chalk.green(`‚úì –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ #${taskId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`));
    console.log(chalk.dim(`–û–ø–∏—Å–∞–Ω–∏–µ: ${summary}`));
  } else {
    console.log(chalk.red(`‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ #${taskId}`));
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * 
 * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
 * @param {string} summary - –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 */
function completeTask(taskId, summary) {
  if (!summary) {
    console.log(chalk.yellow('‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã'));
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
  if (contextTracker.updateTaskStatus(taskId, 'done', summary)) {
    console.log(chalk.green(`‚úì –ó–∞–¥–∞—á–∞ #${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`));
    console.log(chalk.dim(`–û–ø–∏—Å–∞–Ω–∏–µ: ${summary}`));
  } else {
    console.log(chalk.red(`‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é`));
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
try {
  switch (command) {
    case 'summary':
      // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      console.log(chalk.bold('\nüìä –°–≤–æ–¥–∫–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞\n'));
      console.log(contextTracker.getProjectSummary());
      break;
      
    case 'history':
      // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
      if (taskId) {
        console.log(chalk.bold(`\nüìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #${taskId}\n`));
        console.log(contextTracker.getFormattedTaskHistory(taskId));
      } else {
        console.log(chalk.bold('\nüìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á\n'));
        console.log(contextTracker.getFormattedFullHistory());
      }
      break;
      
    case 'init':
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      contextTracker.initContext();
      console.log(chalk.green('‚úì –§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'));
      break;
      
    case 'update':
      // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
      if (!taskId) {
        console.log(chalk.red('‚úó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏'));
        showHelp();
      } else {
        const summary = args.slice(2).join(' ');
        updateTaskContext(taskId, summary);
      }
      break;
      
    case 'complete':
      // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (!taskId) {
        console.log(chalk.red('‚úó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏'));
        showHelp();
      } else {
        const summary = args.slice(2).join(' ');
        completeTask(taskId, summary);
      }
      break;
      
    case 'copilot':
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
      prepareCopilotContext(taskId);
      break;
      
    case 'check-context':
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
      if (!taskId) {
        console.log(chalk.red('‚úó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏'));
        showHelp();
      } else {
        checkAndUpdateCopilotContext(taskId);
      }
      break;
      
    case 'suggest':
      // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GitHub Copilot
      suggestTaskAndPrepareContext();
      break;
      
    case 'help':
    default:
      showHelp();
      break;
  }
} catch (error) {
  console.error(chalk.red(`‚úó –û—à–∏–±–∫–∞: ${error.message}`));
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  loadTasks,
  loadTaskContext,
  saveTaskContext,
  checkAndUpdateCopilotContext,
  prepareCopilotContext,
  suggestTaskAndPrepareContext,
  updateTaskContext,
  completeTask
};